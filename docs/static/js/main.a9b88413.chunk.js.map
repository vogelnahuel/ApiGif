{"version":3,"sources":["components/addCategories.js","components/GifGridItem.js","helpers/GetGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","gifExpertApp.js","index.js"],"names":["AddCategory","props","categories","setcategories","useState","inputvalue","setinputvalue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","GifGridItem","img","title","id","url","className","src","alt","getGIfs","category","a","encodeURI","fetch","resp","json","data","gifs","map","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"yLAyCeA,EAtCK,SAACC,GAChB,IAAOC,EAA4BD,EAA5BC,WAAWC,EAAiBF,EAAjBE,cAEnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OAAS,sBAAMC,SAXM,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IAExBR,EAAc,CAAEE,GAAH,mBAAiBH,KAC9BI,EAAc,MAMb,SAEG,uBACIM,KAAK,OACLC,MAAOR,EACPS,SApBK,SAACN,GAClBF,EAAcE,EAAEO,OAAOF,aCPlBG,EAAc,SAACf,GACxB,MAAuBA,EAAMgB,IAAnBC,GAAV,EAAOC,GAAP,EAAUD,OAAME,EAAhB,EAAgBA,IAChB,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKL,IACpB,kCAAKA,EAAL,W,uBCPCM,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,0FAC4EO,UAAUF,GADtF,sBAECG,MAAMR,GAFP,cAEZS,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KAEDC,EAAOD,EAAKE,KAAK,SAAAhB,GAAO,IAAD,EACzB,MAAO,CACHE,GAAGF,EAAIE,GACPD,MAAQD,EAAIC,MACZE,IAAG,UAAGH,EAAIiB,cAAP,aAAG,EAAYC,iBAAiBf,QATzB,kBAYVY,GAZU,4CAAH,sDCKPI,EAAW,SAAC,GAAgB,IAAfX,EAAc,EAAdA,SAEtB,ECJwB,SAACA,GAEzB,MAA0BrB,mBAAS,CAC/B2B,KAAK,GACLM,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAU,WACNhB,EAAQC,GACPgB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLR,KAAKW,EACLL,SAAQ,MAEb,UAIR,CAACZ,IAEGa,EDjBqBM,CAAanB,GAA7BS,EAAZ,EAAOH,KAAYM,EAAnB,EAAmBA,QAUnB,OACI,qCACA,+BAAKZ,EAAL,OAECY,EAAU,2CAAkB,KAC7B,qBAAKhB,UAAU,YAAf,SAIca,EAAOD,KAAI,SAAAhB,GAAG,OACb,cAAC,EAAD,CACCA,IAAKA,GACAA,EAAIE,aEYlB0B,MArCf,WAEE,MAAoCzC,mBAAS,CAAC,gBAA9C,mBAAOF,EAAP,KAAmBC,EAAnB,KASA,OACE,qCAEE,8CACA,cAAC,EAAD,CACAD,WAAYA,EACXC,cAAeA,IAEhB,uBAEA,6BAEKD,EAAW+B,KAAK,SAACR,GAAD,OACf,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MCvBjBqB,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.a9b88413.chunk.js","sourcesContent":["import React, { Fragment,useState } from 'react';\nimport  PropTypes from 'prop-types'\n\nconst AddCategory = (props) => {\n     const {categories,setcategories} = props;\n\n    const [inputvalue, setinputvalue] = useState(\"\");\n\n    const handleChange = (e) => {\n        setinputvalue(e.target.value);\n    }\n\n    const handleSumbit = (e) => {\n        e.preventDefault();\n        if(inputvalue.trim().length>2)\n        {\n            setcategories( [inputvalue,...categories] );\n            setinputvalue('');\n        }\n       \n       \n    }\n\n    return ( <form onSubmit={handleSumbit}>\n            \n                <input\n                    type=\"text\"\n                    value={inputvalue}\n                    onChange={handleChange}\n                    \n                    \n                  />\n\n            </form> \n    );\n}\n\nAddCategory.propTypes ={\n    setcategories : PropTypes.func.isRequired\n}\n \nexport default AddCategory;","import React from 'react'\n\nexport const GifGridItem = (props) => {\n    const {id,title,url} = props.img;\n    return (\n        <div className=\"card\">\n            <img src={url} alt={title}/>\n            <p> {title} </p>\n            \n        </div>\n    )\n}\n","export const getGIfs = async (category)=>{\n    const url=  `https://api.giphy.com/v1/gifs/search?api_key=xHElIUiC8glza6bPlzjlRdeFoUYzlq9o&q=${encodeURI(category)}&limit=10`;\n     const resp = await fetch(url);\n     const {data} = await resp.json();\n     \n     const gifs = data.map( img =>{\n         return {\n             id:img.id,\n             title : img.title,\n             url : img.images?.downsized_medium.url\n         }\n     })\n      return gifs;\n     \n     }    ","import React,{useState} from 'react'\nimport { GifGridItem } from './GifGridItem';\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid =  ({category}) => {\n\n    const {data:images,loading}=useFetchGifs(category);\n\n    //const [images,setImages]= useState([]);\n\n    \n\n      \n   \n   \n\n    return (\n        <>\n        <h3>{category} </h3>\n\n        {loading ? <p>Loading...</p>:null}\n        <div className=\"card-grid\">\n           \n            \n                \n                    { images.map(img =>\n                       <GifGridItem\n                        img={img}\n                        key={img.id}\n                       />\n                          )\n                    }\n                    \n                 \n          \n            \n        </div>\n        </>\n    )\n}\n","import React,{useState,useEffect} from 'react'\nimport {getGIfs} from '../helpers/GetGifs.js'\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setstate] = useState({\n        data:[],\n        loading:true\n    })\n    //se ejecuta la funcion solo cuando es renderizado por primera vez o si le pones algo es cuando  eso que le pones cambia solo se ejecuta\n    useEffect(() => {\n        getGIfs(category)\n        .then(imgs => {\n            setTimeout(() => {\n                setstate({\n                    data:imgs,\n                    loading:false\n                });\n            }, 2000);\n          \n\n        })\n    } ,[category])\n\n    return state;\n}\n","import React, { Fragment,useState } from 'react';\nimport AddCategory from './components/addCategories';\nimport { GifGrid } from './components/GifGrid';\n\nfunction GifExpertApp() {\n  \n  const [categories, setcategories] = useState(['Dragon ball']);\n  /*const handleButton = (e) => {\n    e.preventDefault();\n    setcategories(\n      [...categories,  'prueba']\n    )\n  }*/\n   \n \n  return (\n    <>\n\n      <h2>gifExpertApp</h2>\n      <AddCategory\n      categories={categories}\n       setcategories={setcategories}\n      />\n      <hr/>\n     \n      <ol>\n         {\n           categories.map( (category) =>\n            <GifGrid \n            key={category}\n            category={category} \n            />\n           ) \n           /*** en react en las llaves solo se puede hacer codigo que devuelva hago un for no devuelve nada */\n         }\n      </ol>\n    </>\n\n  );\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './gifExpertApp';\nimport './index.css'\n\nReactDOM.render(\n \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}